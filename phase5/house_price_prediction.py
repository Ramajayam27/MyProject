# -*- coding: utf-8 -*-
"""house price prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SJ5ga5MF0ck9yihogZPWI2XTHyD1nJhx
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
df=pd.read_csv("USA_Housing.csv")
veri = df.copy()
veri.head()

veri.info()

veri= veri.drop(columns="Address",axis=1)
df.describe().T

sns.pairplot(veri)

sns.heatmap(veri.corr(),annot=True)

import statsmodels.api as sm
from statsmodels.stats.outliers_influence import variance_inflation_factor

y = veri["Price"]
X= veri.drop(columns="Price",axis=1)

cons = sm.add_constant(X)
vif= pd.DataFrame()
vif["variables"]=X.columns
vif["vif"]=[variance_inflation_factor(cons,i+1) for i in range(X.shape[1])]
vif

from sklearn.model_selection import train_test_split,cross_val_score

X_train, X_test, y_train, y_test = train_test_split(X, y,
                                                    test_size=0.2,
                                                    random_state=42)
from sklearn.preprocessing import StandardScaler

ss = StandardScaler()

X_train = ss.fit_transform(X_train)
X_test = ss.transform(X_test)
import sklearn.metrics as mt

def cross_val(model):
    vali=cross_val_score(model,X,y,cv=10)
    return vali.mean()
def success(true_,pred):
    rmse=mt.mean_absolute_error(true_,pred)
    r2=mt.r2_score(true_,pred)
    return[rmse,r2]
from sklearn.linear_model import LinearRegression,Ridge,Lasso,ElasticNet
li_model=LinearRegression()
li_model.fit(X_train,y_train)
li_pred = li_model.predict(X_test)

ridge_model=Ridge(alpha=0.1)
ridge_model.fit(X_train,y_train)
ridge_pred = ridge_model.predict(X_test)

lasso_model=Lasso(alpha=0.1)
lasso_model.fit(X_train,y_train)
lasso_pred = lasso_model.predict(X_test)


elas_model=ElasticNet(alpha=0.1)
elas_model.fit(X_train,y_train)
elas_pred = elas_model.predict(X_test)
result=[["Linear model",success(y_test,li_pred)[0],success(y_test,li_pred)[1],cross_val(li_model)],
        ["Ridge model",success(y_test,ridge_pred)[0],success(y_test,ridge_pred)[1],cross_val(ridge_model)],
        ["Lasso model",success(y_test,lasso_pred)[0],success(y_test,lasso_pred)[1],cross_val(lasso_model)],
        ["ElasticNet model",success(y_test,elas_pred)[0],success(y_test,elas_pred)[1],cross_val(elas_model)]
        ]
pd.options.display.float_format="{:.4f}".format
result=pd.DataFrame(result,columns=["Model","RMSE","R2","Verification"])
result

from matplotlib import pyplot as plt
import seaborn as sns
_df_21.groupby('Model').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)